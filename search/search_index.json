{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Database Controller Docs","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The motivation for this project is declaration of databases in code. In addition, the controller manages credential rotation and zero downtime major database migrations.</p> <p>This project implements a kubebuilder based controller and a mutating webhook. The controller is responsible for lifecycle of the database. The mutating webhook injects helpful sidecars for communicating with the database.</p> <p>Refer to the Go Doc for most up to date information: godoc</p>"},{"location":"#operation","title":"Operation","text":"<p>The controller will connect to an existing unmanaged database or create/manage a new database created by the controller. Once connected it will create schema specific users and rotate the password on those credentials. There is a hotload library that is useful for making sure an application watches for these credential changes.</p> <p>In some situations, it makes sense to offload postgres connections to a sidecar for manageing rotating credentials and connecting to the database. The controller will set this up for you using dbproxy. dbproxy watches for credential changes and bounces internal postgres connectings using a library called pgbouncer. The app should not be aware of any credential or connection changes when using dbproxy. More instructions below on how to use it.</p> <p>dsnexec sidecar that enables reading sql exec statements from disk and executing them.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Deploy db-controller. db-controller will need credentials to provision databases in the cloud. For credential and connection only management, it is possible db-controller does not need any credentials.</p> <pre><code>make deploy\n</code></pre> <p>Create a databaseclaim describing the database. The sourceDataFrom field is used to connect to an existing database. Otherwise, db-controller will create the database for you.</p> <pre><code>apiVersion: persistance.atlas.infoblox.com/v1\nkind: DatabaseClaim\nmetadata:\n  name: identity\n  namespace: default\nspec:\n  class: default\n  databaseName: mydb\n  dbVersion: \"15.2\"\n  enableReplicationRole: false\n  enableSuperUser: false\n  minStorageGB: 0\n  secretName: identity-dsn\n  shape: \"\"\n  sourceDataFrom:\n    database:\n      dsn: postgres://root@name.hostname.region.rds.amazonaws.com:5432/mydb?sslmode=require\n      secretRef:\n        name: mydb-master\n        namespace: default\n    type: database\n  tags:\n  - key: Environment\n    value: dev-cluster\n  type: aurora-postgresql\n  useExistingSource: false\n  userName: identity-api\n</code></pre> <p>To use the dbproxy mutating webhook, add labels to the pod:</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: dbproxy-test\n  namespace: default\n  labels:\n    # Supports dbroleclaim and databaseclaim\n    persistance.atlas.infoblox.com/claim: dbproxy-test\n    persistance.atlas.infoblox.com/class: \"default\"\n    persistance.atlas.infoblox.com/dbproxy: enabled\n  containers:\n    - name: client\n      image: postgres\n      env:\n        - name: PGCONNECT_TIMEOUT\n          value: \"2\"\n      command:\n        - /bin/sh\n        - -c\n        - |\n          set -x\n          until timeout 10 psql -h localhost -c 'SELECT 1'; do\n            echo \"Waiting for sidecar to be ready...\"\n            sleep 3\n          done\n          echo \"Connection successful!\"\n          sleep 10000\n</code></pre> <p>To use dsnexec, a similar set of labels is required</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    persistance.atlas.infoblox.com/claim: dsnexec-test\n    persistance.atlas.infoblox.com/class: default\n    persistance.atlas.infoblox.com/dsnexec: enabled\n    persistance.atlas.infoblox.com/dsnexec-config: dwells-dsnexec-config\n  name: dwells-dsnexec-test\n  namespace: dwells\nspec:\n  containers:\n  - command:\n    - /bin/bash\n    - -cx\n    - |\n      echo \"Waiting for dsnexec to run...\"\n    image: postgres:15\n    name: wait\n</code></pre> <p>Example of a dsnexec secret</p> <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: dwells-dsnexec-config\n  namespace: dwells\nsecretData:\n  config.yaml:\n    configs:\n      sql:\n        disabled: false\n        sources:\n        - driver: postgres\n          # This is not supported in code\n          filename: /var/run/db-dsn/dsn.txt\n        destination:\n          driver: \"postgres\"\n          dsn: \"postgres://user:password@hostname:5432/mydb?sslmode=disable\"\n        commands:\n        - command: |-\n            -- FIXME: The random tableName isn't unique across multiple helm test runs\n            DROP TABLE IF EXISTS dnsexec_qrqc;\n            CREATE TABLE dnsexec_qrqc ( first_column text );\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"Requirements Description controller Establish a pattern (and possible code) for apps to reload connection information from a file mutatingwebhook Establish a pattern for mounting a secret that contains connection information in a secret controller Support dynamically changing the connection information controller CR Change create new database instance and migrate data and delete infrastructure CR controller Migration should with Canary pattern once tests pass all traffic to the new database"},{"location":"#demo","title":"Demo","text":""},{"location":"#configuration","title":"Configuration","text":"%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%%  flowchart TB subgraph shared app1--&gt;claim1 app2--&gt;claim2 end subgraph dedicated app3--&gt;claim3 end  claim1 --&gt; rdsinstance1[(RDS Instance 1)] claim2 --&gt; rdsinstance1 claim3 --&gt; rdsinstance2[(RDS Instance 2)]"},{"location":"#policy-demo","title":"Policy Demo","text":"%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%%  flowchart TB subgraph shared policy reclaim1[shared ReclaimPolicy] --&gt; shared[delete] end subgraph default policy reclaim2[default ReclaimPolicy] --&gt; dedicated[retain] end  reclaim1 --&gt; rdsinstance1[(RDS Instance 1)] reclaim2 --&gt; rdsinstance2[(RDS Instance 2)]"},{"location":"#service-architecture","title":"Service Architecture","text":"<p>The first component is a db-controller service that will be responsible  for reading DBClaims and then provisioning the database and user(s)  for that database. The service will also publish this information  into kubernetes secrets, so they can propagate to the other components. The db-controller is also responsible for rotating the user password  based on the password related config values, and updating the user  password in the associated database and kubernetes secrets store.</p> <p>The db-controller will support config values and master  DB instance connection information, defined in a configMap,  as well as the references to the kubernetes basic auth secrets  that contain the root password for each database instance. At startup of the db-controller, the db-controller will scan  any existing DBClaims in its datastore and use the ConnectionInfoUpdatedAt  timestamp as the starting point for the passwordRotation timers.</p> <p>The second component is to modify the pod definition of the application  service to support secrets in files.  In this model, each key within  the secret will be mapped into a separate file in the mountPath of the volume</p> <p>The third component is a database proxy package for the application service. This proxy  will be used in place of the existing database driver. It is configured to register  the real driver for the database type,so that it can forward all the calls to this  driver. The proxy driver will also be configured with a strategy for where it  can find and monitor the secrets associated with the connection string. When the  proxy detects that any of the connection string information has changed  it can close any open connections that the application has with the real database  driver. When the proxy closes the connections, it will trigger the connection  pool to flush any bad connections, and allow the client application to reconnect. The  new database connections for the application will then transparently use the  new connection string information provided by the proxy.</p>   sequenceDiagram     autonumber     CD -&gt;&gt; K8S: apply manifest     K8S -&gt;&gt; CD: ok     rect rgb(0, 255, 0, .3)         loop             K8S-&gt;&gt;db-controller: new DBClaim             rect rgba(0, 0, 255, .2)                 Note over db-controller: Check for Dynamic Database Creation                  db-controller-&gt;&gt;db-controller: Instance exists?                 db-controller-&gt;&gt;infra-operator: No -&gt; CloudDatabaseClaim                 loop Wait for Database Instance                     infra-operator-&gt;&gt;infra-operator: provision instance                 end                 loop Wait for Database Connection Secret                     db-controller-&gt;&gt;db-controller: Connection Secret exists?                 end             end             db-controller-&gt;&gt;RDS: DB exists?             RDS-&gt;&gt;db-controller: no             db-controller-&gt;&gt;RDS: create DB             RDS-&gt;&gt;db-controller: ok             db-controller-&gt;&gt;RDS: create user &amp; set permissions             RDS-&gt;&gt;db-controller: ok             db-controller-&gt;&gt;K8S: create secret with connection string             K8S-&gt;&gt;db-controller: ok         end     end     rect rgb(0, 255, 0, .3)         loop             Kubelet-&gt;&gt;K8S: get secrets             K8S-&gt;&gt;Kubelet: secrets             Kubelet-&gt;&gt;tempfs: store             tempfs-&gt;&gt;Kubelet: ok         end     end     rect rgb(0, 255, 0, .3)         loop             App-&gt;&gt;tempfs: read             tempfs-&gt;&gt;App: ok         end     end"},{"location":"#data-model","title":"Data Model","text":"<p>The database proxy will include a DatabaseClaim Custom Resource. In the first version of the application the DatabaseClaim contained information related  to a specific instance of a database. In the next major release the DatabaseClaim has information to help an infrastructure operator select a database for the client application. This pattern will allow us to make the database selection be pre-provisioned or dynamic on demand. It will also allow the database selction to be multi-cloud e.g. AWS or Azure.</p> <p>Secrets created by db-controller follow this format:</p> <pre><code>apiVersion: v1\ndata:\n  database: b64enc(mydb)\n  dsn.txt: b64enc(host=dbproxy-test.default.svc port=5432 user=myuser_a password=&amp;#xmetlife1s35gj dbname=mydb sslmode=disable)\n  hostname: b64enc(dbproxy-test.default.svc)\n  password: b64enc(&amp;#xmetlife1s35gj)\n  port: b64enc(5432)\n  sslmode: b64enc(disable)\n  uri_dsn.txt: b64enc(postgres://myuser_a:&amp;#xmetlife1s35gj@dbproxy-test.default.svc:5432/mydb?sslmode=disable)\n  username: b64enc(myuser_a)\nkind: Secret\nmetadata:\n  labels:\n    app.kubernetes.io/managed-by: db-controller\n  name: identity-dsn\n  namespace: default\n  ownerReferences:\n  - apiVersion: persistance.atlas.infoblox.com/v1\n    blockOwnerDeletion: true\n    controller: true\n    kind: DatabaseClaim\n    name: dbproxy-test\n    uid: 23042801-8076-435c-a9f6-a9bec9ac9c8b\n  resourceVersion: \"1801545567\"\n  uid: db5330b7-564d-4cc1-bf47-d907e7307465\ntype: Opaque\n</code></pre> <p>DatabaseClaim will read the set of CR\u2019s describing the DatabaseClaim and store  them in-memory. In the case of dynamic database provisioning a CR is created to request infrastructure operator to create the database instance. db-controller will check the CR satus and to make sure that the database is provisioned and information about it is available in a secret refrenced by the CR.</p> <p>The db-controller will listen for any changes to the DatabaseClaim CR\u2019s and  remain in-sync with the K8 definitions. In the case of dynamic database provisioning a change will cause a new infrastructure CR to be created, when the new database instance is created we should migrate all password, data and connection to it and delete the old infrastructure CR. It will be infrastructure operator concern if the cloud database instances are deleted immediately or there is a higher level operations workflow to reclaim them. We can break the database migration into phases and deliver just new infrastructure CR on change, this might be fine for development environments and work on the full feature for production. There are also advanced use case like  canary where where an new release of the application creates the new database, tests the migration and once everything is working all traffic is migrated away from the old database and it can be reclaimed.</p> <p>The following shows the mapping of the DatabaseClaim to a CloudDatabase. The CloudDatabaseClaim could be custom or use a infrastructure provider like crossplane resource composition. The DatabaseClaim could also be mapped to a Cloud provider like AWS ACK, providing multi-cloud support by transforming DatabaseClaim to a specific cloud provider CR. In the case of AWS you would leverage ACK RDS Provider.</p> %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%% erDiagram     DatabaseClaim ||--o{ ClaimMap : \"\"     DatabaseClaim ||--|| CloudDatabaseClaim : \"\"     CloudDatabaseClaim ||--o{ ClaimMap : \"\"  <p>This the deploying with the CR scheme: Relationship of a DatabaseClaim to a Secret and a Pod: %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%% stateDiagram   direction LR   Application --&gt; DatabaseClaim : Manifest   DatabaseClaim --&gt; CloudDatabaseClaim : Claim Map   CloudDatabaseClaim --&gt; rdsInstance : create instance </p> <p>In this example db-controller-postgres-con-some-app Secret that is written by the infrastructure operator has the connection string and password information for the  db-controller to manage the instance, similar to the pre-provisioned use case.</p>"},{"location":"#configmap","title":"ConfigMap","text":"<p>The db-controller will consume a configMap that contains global config values. <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: db-controller-config\n  namespace: db-controller-namespace\ndata:\n  config.yaml: |\n    passwordConfig:\n      passwordComplexity: enabled\n      minPasswordLength: \"15\"\n      passwordRotationPeriod: \"60\"\n    atlas:\n      username: root\n      host: some.service\n      port: 5432\n      sslMode: disable\n      passwordSecretRef: atlas-master-password\n      passwordSecretKey: password\n    atlas.recyclebin:\n      username: root\n      host: some.other.service\n      port: 5412\n      sslMode: disable\n      passwordSecretRef: atlas-recyclebin-password\n    athena:\n      username=root\n      host=some.service\n      port=5432\n      sslMode: disable\n      passwordSecretRef=athena-master-password\n    athena.hostapp:\n      username=root\n      host=some.service\n      port=5432\n      sslMode: require\n      passwordSecretRef=athena-hostapp-password\n</code></pre></p> <ul> <li>authSource: Determines how database host master password is retrieved. The possible values are \"secret\" and \"aws\". In the case of \"secret\" the value from the passwordSecretRef Secret is used for the password. In the case of \"aws\" the RDS password is retrieved using AWS APIs and db-controller should have IAM credentials to make the necessary calls.</li> <li>region: The region where dynamic database is allocated</li> <li>passwordComplexity: Determines if the password adheres to password complexity rules or not.  Values can be enabled or disable.  When enabled, would require the password to meet specific guidelines for password complexity.  The default value is enabled.  Please see the 3<sup>rd</sup> party section for a sample package that could be used for this.</li> <li>minPasswordLength: Ensures that the generated password is at least this length.  The value is in the range [15, 99].  The default value is 15.  Upper limit is Postgresql max password length limit.</li> <li> <p>passwordRotationPeriod: Defines the period of time (in minutes) before a password is rotated.  The value can be in the range [60, 1440] minutes.  The default value is 60 minutes.</p> </li> <li> <p>defaultMasterPort: Value of MasterPort</p> </li> <li>defaultMasterUsername: Value of MasterUsername</li> <li>defaultSslMode: Value of sslMode</li> <li>defaultShape: Value of Shape if not specified in DatabaseClaim</li> <li>defaultMinStorageGB: Value of MinStorageGB if not specified in DatabaseClaim </li> <li>defaultEngineVersion: Value of EngineVersion if not specified in DatabaseClaim</li> <li>defaultDeletionPolicy: The DeletionPolicy for CloudDatabase, possible values: delete, orphan</li> <li>defaultReclaimPolicy: Used as default value for ReclaimPolicy for CloudDatabase, possible values are \"delete\" and \"retain\"</li> </ul> <p>The configMap and credential secrets must be mounted to volumes within the  pod for the db-controller.  This ensures that when the keys are updated, the  projected keys will also be updated in the pod volume. Below is a sample Pod spec with secret and volumes configured: <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: db-controller\nspec:\n  containers:\n    - name: db-controller\n      image: infobloxopen/db-controller-abcdefg123\n      command: [ \"/main\" ]\n      volumeMounts:\n      - name: config-volume\n        mountPath: /etc/config\n      - name: root-user\n        mountPath: \"/etc/credentials\"\n        readOnly: true\n  volumes:\n    - name: config-volume\n      configMap:\n        name: db-controller-config\n    - name: athena-root-user\n      secret:\n        secretName: athena-hostapp-password\n  restartPolicy: Never\n</code></pre> The root user passwords will be stored in kubernetes secrets and the name  must match the passwordSecretRef value in the configMap. Here is sample Secret that match above example: <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: athena-hostapp-password\ntype: Opaque\nstringData:\n  password: t0p-Secr3t!@\n</code></pre></p>"},{"location":"#databaseclaim-custom-resource","title":"DatabaseClaim Custom Resource","text":"<p>The DatabaseClaim custom resource describes the connection information for  a database instance.  It includes the following properties:</p>"},{"location":"#secrets","title":"Secrets","text":"<p>During the processing of each DatabaseClaim, the db-controller will generate the  connection info and also create a secret with the relevant information. The secret  will have the same name as the DatabaseClaim, and contain keys that match the  values of the properties under the DatabaseClaim status.connectionInfo property.</p> <p>The keys in the secret are shown below: * \"dsn.txt\" : postgres dsn string value specified by DatabaseClaim * \"uri_dsn.txt\" + dsn : url path value is \"uri_\" prefix added to dsn * \"hostname\" : postgres host of dsn * \"port\" : port used for connecting to the database * \"database\" : postgres database created on host * \"username\" : username to access the database * \"password\" : password to access the database * \"sslmode\" : SSL Mode value as specified by dsn spec</p>"},{"location":"#using-secrets-as-files","title":"Using Secrets as Files","text":"<p>Modify the Pod definition, for the service that you will add the proxy package, to  add a volume under .spec.volumes[]. Name the volume anything, and have  a .spec.volumes[].secret.secretName field equal to the name of the Secret  object, which in this case is also the name of the DatabaseClaim.</p> <p>Add a .spec.containers[].volumeMounts[] to each container that needs  the secret. Specify .spec.containers[].volumeMounts[].readOnly = true  and .spec.containers[].volumeMounts[].mountPath to an unused directory  name where you would like the secrets to appear.</p> <p>Modify your image or command line so that the proxy package looks  for files in that directory. Each key in the secret data map becomes the  filename under mountPath.</p>"},{"location":"#example-secret-config","title":"Example Secret Config","text":"<pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: mypod\nspec:\n  containers:\n  - name: mypod\n    image: redis\n    volumeMounts:\n    - name: foo\n      mountPath: \"/etc/connection\"\n      readOnly: true\n  volumes:\n  - name: foo\n    secret:\n      secretName: mysecret\n</code></pre> <p>Relationship of a DatabaseClaim to a Secret and a Pod: %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%% stateDiagram   direction LR   Pod --&gt; Secret : references   Secret --&gt; DatabaseClaim : ownedBy </p>"},{"location":"#api","title":"API","text":"<p>N/A</p>"},{"location":"#implementation","title":"Implementation","text":"<p>The DatabaseClaim Status is where keep the state used by the reconciler. The important part is:</p> <ul> <li>ConnectionInfo[]: connection info about the database that is projected into a client accessible secret</li> </ul> <p>In this part we will look at the UpdateStatus function sequence and the proposed changes to support dynamic database creation while leaving much of the working db-controller to interoperate:</p>   sequenceDiagram       rect rgba(255, 0, 255, .2)          par New Dynamic Database Binding           getClient-&gt;&gt;getHost: dbClaim           getHost-&gt;&gt;getHost: Spec.Host           getHost-&gt;&gt;getHost: Yes           Status-&gt;&gt;getHost: Status.CloudDatabase.Host == \"\" ?           getHost-&gt;&gt;getHost: Yes                   getHost-&gt;&gt;createCloudDatabase: dbClaim           createCloudDatabase-&gt;&gt;createCloudDatabase: Wait for resource ready           createCloudDatabase-&gt;&gt;getHost: CloudDatabase           getHost-&gt;&gt;Status: Status.CloudDatabase.{Name, Host, Port, User, Password}           getHost-&gt;&gt;getClient: {Host, Port, User, Password}         end       end       rect rgba(255, 255, 0, .2)          par Existing Static Database Binding           getHost-&gt;&gt;getHost: Spec.Host           getHost-&gt;&gt;getHost: No           getProvisionedHost-&gt;&gt;getHost: {Host, Port, User, Password}           getHost-&gt;&gt;getClient: {Host, Port, User, Password}         end     getClient-&gt;&gt;Status: Status.ConnectionInfo.Host     getClient-&gt;&gt;Status: Status.ConnectionInfo.Port     getClient-&gt;&gt;Status: Status.ConnectionInfo.SSLMode     getClient-&gt;&gt;Status: Status.ConnectionInfo.ConnectionInfoUpdatedAt     getClient-&gt;&gt;DBClientFactory: host, port, user, password, sslmode     DBClientFactory-&gt;&gt;getClient: dbClient     getClient-&gt;&gt;UpdateStatus: dbClient     UpdateStatus-&gt;&gt;GetDBName: dbClaim     GetDBName-&gt;&gt;UpdateStatus: Spec.DatabaseName or Spec.DBNameOverride"},{"location":"#lifecycle","title":"Lifecycle","text":"<p>TODO - Document the full lifecycle not just for Dynamic Host</p> <p>The dynamic host allocation will have the following lifecycle:</p> <p>The create and update lifecycles are fairly simple: %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%% stateDiagram-v2 CDH: Create Dynamic Host CDU: Update Dynamic Host  [*] --&gt; DbClaim state DbClaim {     Create --&gt; CDH     --     Update --&gt; CDU } </p> <p>The delete lifecycle is more complex shown below:</p> %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#fffcbb', 'lineColor': '#ff0000', 'primaryBorderColor': '#ff0000'}}}%% stateDiagram-v2 DCD: Delete CloudDatabase DDC: Delete DatabaseClaim  [*] --&gt; DbClaim state DbClaim {     Delete --&gt; Finalizer     state Finalizer {         state check_host &lt;&gt;         state check_label &lt;&gt;         [*] --&gt; check_host         check_host --&gt; check_label: if Claim.Host == \"\"         check_host --&gt; [*] : if Claim.Host != \"\"         check_label --&gt; DCD: if ReclaimPolicy == Delete &amp;&amp; DbClaims using CloudDB == 1         check_label --&gt; [*] : if ReclaimPolicy == Retain         DCD --&gt; [*]     }     Finalizer --&gt; DDC     DDC --&gt; [*] }  <p>The sharing of database by multiple applicaitons (Claims) by Crossplane is an open issue. The db-controller creates the CloudDatabase Claim and the associated connection secret is created in the db-controller namespace.</p> <p>Crossplane started  with the intent of using a similar pattern used by pv and pvc in Kubernetes. The ReclaimPolicy had a lot off issues and it got backed out and it got renamed to DeletionPolicy on just the CloudDatabase resource.</p> <p>DatabaseClaim resources are namespaced, but the CloudDatabase resources are dynamically provisioned as cluster scoped. A namespaced resource cannot, by design, own a cluster scoped resource. This could be an issue in how we manage lifecycle, see kubernetes and crossplane references.</p> <p>We need some more research PoC to figure out if we can use  Kubernetes Finalizers on DatabaseClaim to honor a ReclaimPolicy with values of delete and retain. Then have ReclaimPolicy delete a dynamically allocated database that is no longer shared. The reason for the  deprecation of ReclaimPolicy from CrossPlane needs to be examined in the light of our requirements and why Crossplane does not offer a  Shared Database Pattern. A argument made here  suggest that in most cases sharing infrastructure within namespace  boundaries with a  single claim is valid, as namespace == application  team boundary. Does forcing applciations to share namespace for database sharing cause any issues, e.g. RBAC?</p> <p>The Crossplane Infrastructure Operator, has a resource DeletionPolicy which specifies what will happen  to the underlying external cloud resource when this managed resource is  deleted - either \"Delete\" or \"Orphan\" the external resource. This will be managed by defaultDeletionPolicy.</p> <p>Another features we have is to share resources like RDS among different clusters that are deployed. We don't have a design yet on how to best support this requirement. Crossplane Infrastructure Operator supports multiple clusters, using an admin cluster and then resources like CloudDatabases are pushed to the managed clusters, Crossplane workload reference. Crossplane also have an observerable pattern to deal with this coupling between clusters trying to share resources.</p>"},{"location":"#deployment","title":"Deployment","text":"<p>When API is updated need to update the crd definition and helm chart that updates it. The following make target is setup to do this: <pre><code>make update_crds\n</code></pre></p>"},{"location":"#authentication","title":"Authentication","text":""},{"location":"#authorization","title":"Authorization","text":"<p>This db-controller service will require access to credentials that have permissions to provision the database as well as access to the master user account to manage users for the target database.</p>"},{"location":"#ingress","title":"Ingress","text":"<p>N/A</p>"},{"location":"#audit","title":"Audit","text":"<p>N/A</p>"},{"location":"#logging","title":"Logging","text":"<p>TBD</p>"},{"location":"#alerting","title":"Alerting","text":"<p>Prometheus alerts based on errors from the db-controller.</p>"},{"location":"#performance","title":"Performance","text":"<p>N/A</p>"},{"location":"#security","title":"Security","text":"<p>TBD</p>"},{"location":"#third-party-software","title":"Third-Party Software","text":"Name/Version License Description/Reason for usage fsnotify BSD-3-Clause Golang cross platform file system notifications go-password MIT License Generation of random passwords with provided requirements as described by  AgileBits"},{"location":"#metricstelemetry","title":"Metrics/Telemetry","text":"<ul> <li>The following metrics should be exposed:</li> <li>Total database users created</li> <li>Time to create a new database user</li> <li>Total database provisioning errors</li> <li>Total database users created with errors</li> <li>Total passwords rotated</li> <li>Time to rotate user password</li> <li>Total password rotated with error</li> <li>Total DBClaim load errors</li> <li>Total DBClaims loaded</li> <li>Time to load a DBClaim</li> </ul>"},{"location":"#scalability","title":"Scalability","text":"<p>The db-controller service needs to be able to scale out based on demand.</p>"},{"location":"#deployment-architecture","title":"Deployment Architecture","text":"<p>GCP provisions databases using PSC and local IPs. Here is a diagram describing the necessary service objects that are required to conenct to it.</p> <p></p>"},{"location":"#service-dependencies","title":"Service Dependencies","text":"<p>This service depends on these services: * kube-api-server</p>"},{"location":"#service-killers","title":"Service Killers","text":"Service Name Impact RDS Can't create new databases, can't rotate passwords. can't process new claims. kube-apiserver full down."},{"location":"#data-analytics","title":"Data Analytics","text":"<p>N/A</p>"},{"location":"#references","title":"References","text":"<p>Hotload database driver</p>"}]}